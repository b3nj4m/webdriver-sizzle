// Generated by CoffeeScript 1.7.1
(function() {
  var assert, assertUncaught, path, url, webdriver, webdriverSizzle;

  assert = require('assert');

  path = require('path');

  webdriver = require('selenium-webdriver');

  webdriverSizzle = require('..');

  url = function(page) {
    return "file://" + (path.join(__dirname, page));
  };

  assertUncaught = function(regex, done) {
    var listeners;
    listeners = process.listeners('uncaughtException');
    process.removeAllListeners('uncaughtException');
    return process.once('uncaughtException', function(err) {
      assert(regex.test(err.message, "" + err.message + " doesn't match " + regex));
      listeners.forEach(function(listener) {
        return process.on('uncaughtException', listener);
      });
      return done();
    });
  };

  describe('webdriver-sizzle', function() {
    var $;
    $ = null;
    return describe('once driving a webdriver Builder', function() {
      before(function(done) {
        var driver;
        driver = new webdriver.Builder().withCapabilities(webdriver.Capabilities.phantomjs()).build();
        this.timeout(0);
        driver.get(url('finnegan.html')).then(function() {
          return done();
        });
        return $ = webdriverSizzle(driver);
      });
      describe('calling with a CSS selector', function() {
        it('returns the first matching webdriver element', function(done) {
          return $('.test-el').getText().then(function(text) {
            assert.equal(text, "The following text is an excerpt from Finnegan's Wake by James Joyce");
            return done();
          });
        });
        return describe('that matches no elements', function() {
          return it('throws an error that includes the selector', function(done) {
            $('.does-not-match').getText();
            return assertUncaught(/does-not-match/, done);
          });
        });
      });
      return describe('all', function() {
        return it('returns all matching elements', function(done) {
          return $.all('p').then(function(elements) {
            assert.equal(elements.length, 2);
            return done();
          });
        });
      });
    });
  });

}).call(this);
